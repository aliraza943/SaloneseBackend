router.post('/get-availability/:siteUrl', async (req, res) => {
  const { siteUrl } = req.params;
  const { selection, date } = req.body;

  if (!date) {
    return res.status(400).json({ success: false, message: 'Date is required' });
  }

  try {
    const website = await Website.findOne({ url: siteUrl });
    if (!website) {
      return res.status(404).json({ success: false, message: 'Website not found' });
    }
    const businessId = website.businessId;

    // Group service IDs by staffKey (either 'max_availability' or a specific staffId)
    const servicesByStaff = {};
    for (const [serviceId, staffKey] of Object.entries(selection)) {
      servicesByStaff[staffKey] = servicesByStaff[staffKey] || [];
      servicesByStaff[staffKey].push(serviceId);
    }

    // Pre‑load all durations
    const allServiceIds = Object.keys(selection);
    const serviceDocs = await Service.find({ _id: { $in: allServiceIds } });
    const durations = serviceDocs.reduce((acc, s) => {
      acc[s._id] = s.duration;
      return acc;
    }, {});

    const startDate = dayjs(date);
    const endDate   = startDate.add(3, 'month');
    const allSlotsByDay = {};

    // Iterate each day in the 3‑month window
    for (let d = startDate; d.isBefore(endDate); d = d.add(1, 'day')) {
      const currentDate = d.format('YYYY-MM-DD');
      const dayName     = d.format('dddd');

      // Build one unified list of availability ranges across all relevant staff
      let availabilityRanges = [];

      // Determine which staff to consider
      const specificStaffIds = Object.values(selection).filter(v => v !== 'max_availability');
      let staffList;
      if (specificStaffIds.length) {
        staffList = await Staff.find({
          _id: { $in: specificStaffIds },
          businessId,
          role: 'provider'
        });
      } else {
        // any provider who can do all services
        staffList = await Staff.find({
          businessId,
          role: 'provider',
          services: { $all: allServiceIds }
        });
      }

      // Collect every person's working-hours block for this day
      for (const person of staffList) {
        const wh = person.workingHours?.[dayName] || [];
        for (const range of wh) {
          const [startStr, endStr] = range.split(' - ');
          availabilityRanges.push({
            start: dayjs(`${currentDate} ${startStr}`, 'YYYY-MM-DD hh:mm A'),
            end:   dayjs(`${currentDate} ${endStr}`,   'YYYY-MM-DD hh:mm A')
          });
        }
      }

      // Merge overlaps into consolidated “free” blocks
      availabilityRanges.sort((a, b) => a.start - b.start);
      const merged = [];
      for (const r of availabilityRanges) {
        if (!merged.length || r.start.isAfter(merged[merged.length-1].end)) {
          merged.push({ ...r });
        } else {
          // extend the existing block
          merged[merged.length-1].end = dayjs.max(merged[merged.length-1].end, r.end);
        }
      }

      // Now slice each merged block into slots of totalDuration
      const totalDuration = allServiceIds.reduce((sum, id) => sum + (durations[id]||0), 0);
      const dailySlots = [];
      for (const block of merged) {
        let cursor = block.start;
        while (cursor.add(totalDuration, 'minute').isSameOrBefore(block.end)) {
          dailySlots.push({
            start:    cursor.toISOString(),
            end:      cursor.add(totalDuration, 'minute').toISOString(),
            label:    cursor.format('hh:mm A'),
            duration: totalDuration
          });
          cursor = cursor.add(15, 'minute');
        }
      }

      if (dailySlots.length) {
        allSlotsByDay[currentDate] = dailySlots;
      }
    }

    // Remove any slot that overlaps an existing appointment
    const appointments = await Appointment.find({
      businessId,
      start: { $gte: startDate.toDate(), $lte: endDate.toDate() }
    });
    for (const [day, slots] of Object.entries(allSlotsByDay)) {
      allSlotsByDay[day] = slots.filter(s => {
        return !appointments.some(a =>
          dayjs(s.start).isBefore(dayjs(a.end)) &&
          dayjs(s.end).isAfter(dayjs(a.start))
        );
      });
    }

    return res.json({
      success: true,
      businessId,
      availableSlots: allSlotsByDay
    });

  } catch (err) {
    console.error('Error in get-availability:', err);
    res.status(500).json({ success: false, message: 'Server error' });
  }
});